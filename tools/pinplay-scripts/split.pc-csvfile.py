#!/usr/bin/env python3
#BEGIN_LEGAL 
#BSD License 
#
#Copyright (c)2022 Intel Corporation. All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its contributors 
#   may be used to endorse or promote products derived from this software without 
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#END_LEGAL
# Print out messages, including error messages
#
#

# Usage :  split.pc-csvfile.py --csv_file incsvfile
# where icsvfile is generated by pcregions.py 
# Output: multiple *.rid.CSV files one for each simulation rid in incsvfile
#   each CSV file contains a single simulation region record and any matching
#   warmup region record

import subprocess
import sys
import os
import argparse
import re
from msg import ensure_string

def PrintAndExit(msg):
    """
    Prints an error message exit.

    """
    sys.stderr.write(msg)
    sys.stderr.write("\n")
    sys.exit(-1)

def PrintMsg(msg):
    """
    Prints an message 
    """
    sys.stdout.write(msg)
    sys.stdout.write("\n")
    sys.stdout.flush()

def OpenFile(fl, type_str):
    if not os.path.isfile(fl):
        PrintAndExit('File does not exist: %s' % fl)
    try:
        fp = open(fl, 'rb')
    except IOError:
        PrintAndExit('Could not open file: %s' % fl)

    return fp

def WriteRec(fp, msg, rec):
  """
   Write region record to fp
  """
  fp.write(msg)
  fp.write(rec['rstr'])
  fp.write(rec['sstr'])
  fp.write(rec['estr'])
  fp.write(rec['rec'])

def OutputCSVFiles(csv_file, rcount):
    """
    Input fp: a PC-regions PinPoints csv file 
        Simulation region records starting with 'cluster '
    Format:  comment,thread-id,region-id,start-pc, start-image-name, start-image-offset, start-pc-count,end-pc, end-image-name, end-image-offset, end-pc-count,end-pc-relative-count, region-length, region-weight, region-multiplier, region-type
    """

    sregions = {}
    wregions = {}
    extindex=csv_file.rindex('.csv')
    basename=csv_file[:extindex]
    cstr=''

    fp = OpenFile(csv_file, "IN combined PC CSV file")
    line = ensure_string(fp.readline())
    outcount=0

    #import pdb;  pdb.set_trace()
    while line:
      if  re.search('^# comment',line):
        cstr=line
      if  re.search('^# RegionId =',line):
        rstr=line
      if  re.search('^#Start: pc',line):
        sstr=line
      if  re.search('^#End: pc',line):
        estr=line
      if  re.search('^cluster ',line):
        fields=line.split(',')
        fcount = len(fields)
        rid=fields[2]
        sregion = {}
        sregion['rid'] = rid
        sregion['rstr'] = rstr
        sregion['sstr'] = sstr
        sregion['estr'] = estr
        sregion['rec'] = line
        sregions[rid] = sregion
        #import pdb;  pdb.set_trace()
      if  re.search('^Warmup for regionid ',line):
        fields=line.split(',')
        rid=fields[2]
        wrec=fields[0]
        wfields=wrec.split()
        #Warmup for regionid 2
        simrid=wfields[3]
        wregion = {}
        wregion['rid'] =  rid
        wregion['rstr'] = rstr
        wregion['sstr'] = sstr
        wregion['estr'] = estr
        wregion['rec'] = line
        wregions[simrid] = wregion
      line = ensure_string(fp.readline())
    
    #import pdb;  pdb.set_trace()
    for key in sregions.keys():
      rfname = basename+'.'+key+'.CSV'
      rfile = open(rfname, 'w')
      WriteRec(rfile, "# Generated from "+basename+".csv"+'\n'+cstr+'\n', sregions[key])
      #print(sregions[key])
      if key in wregions.keys():
        WriteRec(rfile, "# Warmup record"+'\n', wregions[key])
        #print(wregions[key])
      #  print(wregions[key])
      rfile.close()
    return
  

def OpenCSVFile(csv_file, type_str):
    """
    Open a PC-regions PinPoints csv file and check to make sure it's valid.  A valid
    PC-CSV file must contain 
        # RegionId = 2 Slice ...
        #Start: pc 
        #End: pc
        Simulation region records starting with 'cluster '
    @return simregion_count, file_pointer
    """

    # import pdb;  pdb.set_trace()
    if  not re.search('.csv$',csv_file):
      PrintAndExit("File "+csv_file+" does not end in '.csv'")
    fp = OpenFile(csv_file, type_str)
    line = ensure_string(fp.readline())
    ridseen = False
    spcseen = False
    epcseen = False
    rcount=0

    #import pdb;  pdb.set_trace()
    while line:
      if  re.search('^# RegionId =',line):
        ridseen = True
      if  re.search('^#Start: pc',line):
        spcseen = True
      if  re.search('^#End: pc',line):
        epcseen = True
      if  re.search('^cluster ',line):
        rcount = rcount + 1
      line = ensure_string(fp.readline())

    if (not ridseen):
      PrintAndExit("File "+csv_file+" does not have any '# RegionId' strings ")
    if (not spcseen):
      PrintAndExit("File "+csv_file+" does not have any '#Start: pc' strings ")
    if (not epcseen):
      PrintAndExit("File "+csv_file+" does not have any '#End: pc' strings ")

    PrintMsg(str(rcount)+' simulation regions seen')

    fp.close()

    return rcount

def GenPerRegionCSV(infname):
    """
    Read in a combined PC-region CSV file  and create multiple CSV files
    one per regions 

    @return no return value
    """
    rcount=OpenCSVFile(infname, 'PC-region PinPoints file')
    PrintMsg(str(rcount)+' simulation regions reported by OpenCSVFile()')
    OutputCSVFiles(infname, rcount)



parser = argparse.ArgumentParser()
parser.add_argument("--csv_file", help="PC-region PinPoints file", required=True)
args = parser.parse_args()
GenPerRegionCSV(args.csv_file)
